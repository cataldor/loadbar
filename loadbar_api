#!/usr/bin/env sh
# API for loadbar
# all functions are prefixed with loadbar_
# all variables are prefixied with lb_
#
# While the script is loaded, the cursor is hidden (civis), but it is restored
# when SIGEXIT is received (cnorm)
#
# Another trap is employed for SIGWINCH to reposition cursor to the end (rc, ed)

trap "tput cnorm" EXIT
tput civis

tput sc
trap "tput rc; tput ed" WINCH

loadbar_print_usage() {
	cat <<EOF
Usage: $(basename "$0")  [OPTION...]
Display progress bar by reading values from stdin.

  -t, --title TEXT        Display TEXT before the loading bar
  -m, --max-value VALUE   Define the maximum value (default: 100)
  -p, --percentage        Display percentage progress
  -v, --value             Display progress by value
  -s, --size              Define length of the loading bar (text included)
  -f, --fill CHAR         Define the character to use for filled part of the bar
  -b, --background CHAR   Define the character to use for the background part of the bar
  -n, --no-color          Do not use colors for the loading bar
  -h, --help              Display this help
EOF
}

loadbar_check_arg_for() {
	[ "$2" ] || {
		echo "Err: $1 requires a non-empty option argument" 2>&1
		exit 1
	}
}

loadbar_parse_args() {
	while getopts ":t:m:s:f:b:pvnh" lb_option "$@"; do
		case "${lb_option}" in
		t) lb_title="${OPTARG}" ;;
		m) lb_max="${OPTARG}" ;;
		s) lb_size="${OPTARG}" ;;
		p) lb_show_percentage=true ;;
		v) lb_show_value=true ;;
		f) lb_fill_character="${OPTARG}" ;;
		b) lb_background_character="${OPTARG}" ;;
		n) lb_show_no_color=true ;;
		h)
			loadbar_print_usage
			exit 0
			;;
		*)
			echo "Invalid arg: ${lb_option}" >&2
			loadbar_print_usage
			exit 1
			;;
		esac
	done
}

loadbar_parse_long() {
	lb_i=0
	lb_args_count=$#
	while [ $lb_i -lt $lb_args_count ]; do
		lb_i=$((lb_i + 1))
		case "$1" in
		--title)
			lb_title="$2"
			shift 2
			lb_i=$((lb_i += 1)) continue
			;;
		--title=*)
			lb_title="${1#*=}"
			shift
			continue
			;;
		--max-value)
			lb_max="$2"
			shift 2
			lb_i=$((lb_i += 1))
			continue
			;;
		--max-value=*)
			lb_max="${1#*=}"
			shift
			continue
			;;
		--size)
			lb_size="$2"
			shift 2
			lb_i=$((lb_i += 1))
			continue
			;;
		--size=*)
			lb_size="${1#*=}"
			shift
			continue
			;;
		--fill)
			lb_fill_character="$2"
			shift 2
			lb_i=$((lb_i += 1))
			continue
			;;
		--fill=*)
			lb_fill_character="$2"
			shift
			lb_i=$((lb_i += 1))
			continue
			;;
		--background)
			lb_background_character="$2"
			shift 2
			lb_i=$((lb_i += 1))
			continue
			;;
		--background=*)
			lb_background_character="${1#*=}"
			shift 2
			lb_i=$((lb_i += 1))
			continue
			;;
		--percentage)
			lb_show_percentage=true
			shift
			continue
			;;
		--value)
			lb_show_value=true
			shift
			continue
			;;
		--no-color)
			lb_show_no_color=true
			shift
			continue
			;;
		--help)
			loadbar_print_usage
			exit 0
			continue
			;;
		*)
			set -- "$@" "$1"
			shift
			;;
		esac
	done
	loadbar_parse_args "$@"
}

loadbar_init_values() {
	[ -z "${lb_title:-}" ] && lb_title="" || lb_title="$lb_title "
	[ -z "${lb_show_percentage:-}" ] && lb_show_percentage=''
	[ -z "${lb_show_value:-}" ] && lb_show_value=''
	lb_title_size="${#lb_title}"
	lb_max=${lb_max:-100}
	lb_value_progress=" [${lb_max}/${lb_max}]"
	lb_value_progress_size=${#lb_value_progress}
	lb_percentage=" [100%]"
	lb_percentage_size=${#lb_percentage}
	lb_fill_character=${lb_fill_character:-█}
	lb_background_character=${lb_background_character:-░}
	lb_fill_color=$(tput setaf 2)
	lb_reset_color=$(tput sgr0)
}

loadbar_validate_values() {
	[ ! "${#lb_fill_character}" -eq 1 ] && [ ! "$(printf "%s" "$lb_fill_character" | wc -m)" -eq 1 ] && echo "Invalid character ${lb_fill_character}: Fill charachter should be of size 1" >&2 && exit 1
	[ ! ${#lb_background_character} -eq 1 ] && [ ! "$(printf "%s" "$lb_background_character" | wc -m)" -eq 1 ] && echo "Invalid character '${lb_background_character}': Background character should be of size 1" >&2 && exit 1
	return 0
}

loadbar_is_number() {
	printf '%d' "${1}" >/dev/null 2>&1
}

loadbar_validate_value() {
	loadbar_is_number "$1" && [ "$1" -le "$lb_max" ] && [ "$1" -ge 0 ]
}

loadbar_compute_bar_size() {
	lb_bar_size=${lb_size:-$(tput cols)}
	[ -z "$lb_title" ] || lb_bar_size=$((lb_bar_size - lb_title_size))
	[ -z "$lb_show_percentage" ] || lb_bar_size=$((lb_bar_size - lb_percentage_size))
	[ -z "$lb_show_value" ] || lb_bar_size=$((lb_bar_size - lb_value_progress_size))
}

loadbar_draw_character_on() {
	printf "%s" "$(printf ":%${2}s:" | sed -e "s/ /${1}/g" -e 's/://g')"
}

loadbar_display_bar() {
	while read -r lb_value; do
		loadbar_validate_value $lb_value || continue
		loadbar_compute_bar_size
		[ -n "$lb_title" ] && printf "%s" "$lb_title"
		[ -z "$lb_show_no_color" ] && printf "%b" "${lb_fill_color}"
		lb_percentage=$((lb_value * 100 / lb_max))
		lb_fill_size=$((lb_bar_size * lb_percentage / 100))
		loadbar_draw_character_on "${lb_fill_character}" "$lb_fill_size"
		lb_empty_size=$((lb_bar_size - lb_fill_size))
		loadbar_draw_character_on "${lb_background_character}" "${lb_empty_size}"
		[ -z "$lb_show_no_color" ] && printf "%b" "${lb_reset_color}"
		[ -n "$lb_show_percentage" ] && printf "%${lb_percentage_size}s" "[${lb_percentage}%]"
		[ -n "$lb_show_value" ] && printf "%${lb_value_progress_size}s" " [${lb_value}/${lb_max}]"
		printf "\r"
	done
}

